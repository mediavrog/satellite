require 'helper'

class TestSatellite < Test::Unit::TestCase

  VALID_GOOGLE_ANALYTICS_PARAMS = {
      :utms => 1,
      #:utmn => 123456789, autogenerated
      :utmhn => 'api.mymobai.com',
      :utme => '5(controller*action*coupon_redeem)(10)8(test)9(Please_track_this)11(1)',
      :utmcn => 1,
      :utmcs => 'UTF-8',
      :utmsr => '1440x900',
      :utmul => 'de',
      :utmje => '1',
      :utmfl => '10.3%20r183',
      :utmdt => 'Properly track a page view',
      #:utmhid => '1655425535', auto
      :utmr => 'test.local/properly track a page view',
      :utmp => '/test/properly-track-page-view',
      #:utmac => nil, #set via 'Satellite::Adapters::GoogleAnalytics.account_id' in local_conf.rb
  }

  should "create a proper google adapter" do
    tracker = Satellite.get_tracker(:google_analytics)
    assert_equal tracker.type, Satellite::Adapters::GoogleAnalytics
  end

  should "return any created tracker as tracker interface" do
    tracker = Satellite.get_tracker(:google_analytics)
    assert_equal tracker.class, Satellite::TrackerInterface
  end

  context 'google_adapter' do

    #http://www.google-analytics.com/__utm.gif?
    #utmwv
    #utms
    #utmn
    #utmhn
    #utme
    #utmcs
    #utmsr
    #utmsc
    #utmul
    #utmje
    #utmfl
    #utmdt=
    #utmhid
    #utmr
    #utmp
    #utmac
    #utmcc
    #utmu
    should "properly track a page view" do
      tracker = Satellite.get_tracker(:google_analytics, VALID_GOOGLE_ANALYTICS_PARAMS)

      assert_equal tracker.track_page_view, true
    end

    should "properly track a page view with given path" do
      tracker = Satellite.get_tracker(:google_analytics, VALID_GOOGLE_ANALYTICS_PARAMS)
      
      path = "/test/path_test"
      tracker.track_page_view(path)
      tracker_path = tracker[:utmp].dup

      assert_equal tracker_path, path
    end

    context 'utme' do

      should "properly parse given utme string" do
        utme_string = '5(controller*action*coupon_redeem)(10)8(test*test2)9(Please_track_this*Tracking with whitepsace)11(1)'

        utme = Satellite::Adapters::GoogleAnalytics::Utme.parse(utme_string)

        assert_equal utme.to_s, utme_string
      end
    end
  end
end
